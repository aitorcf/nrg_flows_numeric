NRG Ljubljana 2.4.3.34 (c) Rok Zitko, rok.zitko@ijs.si, 2005-2019
Mathematica version: 12.1.1 for Linux x86 (64-bit) (June 19, 2020)
sneg version: 1.251
Loading module initialparse.m
Options: {}
Loading module models.m
"models started"
def1ch, NRDOTS=2
COEFCHANNELS:1
H0=coefzeta[1, 0]*(-1 + nc[f[0, 0, 0], f[1, 0, 0]] + nc[f[0, 0, 1], f[1, 0, 1]])
adddots, nrdots=2
Loading module custommodels.m
Can't load custommodels.m. Continuing.

UpSet::write: Tag Gamma in snegnonopQ[Gamma] is Protected.

UpSet::write: Tag Gamma in Conjugate[Gamma] is Protected.
params={gammaPol -> Sqrt[gammaA*theta0]/Sqrt[Pi], gammaPolCh[ch_] :> Sqrt[1/Pi*theta0Ch[ch]*gammaA], hybV[i_, j_] :> Sqrt[1/Pi]*V[i, j], coefzeta[ch_, j__] :> N[bandrescale*zeta[ch][j]], coefxi[ch_, j__] :> N[bandrescale*xi[ch][j]], 
   coefrung[ch_, j__] :> N[bandrescale*zetaR[ch][j]], coefdelta[ch_, j__] :> N[bandrescale*scdelta[ch][j]], coefkappa[ch_, j__] :> N[bandrescale*sckappa[ch][j]], U -> 0.1, delta -> 0, t -> 0., 
   gammaPol2 -> Sqrt[extraGamma2*gammaA*thetaCh[1]]/Sqrt[Pi], gammaPol2to2 -> Sqrt[extraGamma2to2*gammaA*thetaCh[2]]/Sqrt[Pi], gammaPolch1 -> Sqrt[extraGamma1*gammaA*thetaCh[1]]/Sqrt[Pi], 
   gammaPolch2 -> Sqrt[extraGamma2*gammaA*thetaCh[2]]/Sqrt[Pi], gammaPolch3 -> Sqrt[extraGamma3*gammaA*thetaCh[3]]/Sqrt[Pi], Jspin -> extraJspin*gammaA, Jcharge -> extraJcharge*gammaA, Jcharge1 -> extraJcharge1*gammaA, 
   Jcharge2 -> extraJcharge2*gammaA, Jkondo -> extraJkondo*gammaA, Jkondo1 -> extraJkondo1*gammaA, Jkondo2 -> extraJkondo2*gammaA, Jkondo3 -> extraJkondo3*gammaA, Jkondo1P -> extraJkondo1P*gammaA, Jkondo2P -> extraJkondo2P*gammaA, 
   Jkondo1Z -> extraJkondo1Z*gammaA, Jkondo2Z -> extraJkondo2Z*gammaA, JkondoP -> extraJkondoP*gammaA, JkondoZ -> extraJkondoZ*gammaA, Jkondo1ch2 -> extraJkondo1ch2*gammaA, Jkondo2ch2 -> extraJkondo2ch2*gammaA, gep -> extrag, dd -> extrad, 
   U -> 0.1, Gamma -> 0.0002, delta -> 0}
NRDOTS:2
CHANNELS:1
basis:{a[], d[], f[0]}
lrchain:{}
lrextrarule:{}
NROPS:3
Hamiltonian generated. U - coefzeta[1, 0] + delta*nc[a[0, 0], a[1, 0]] - deltaeps*nc[a[0, 0], a[1, 0]] - (U*nc[a[0, 0], a[1, 0]])/2 + gammaPol*nc[a[0, 0], f[1, 0, 0]] + delta*nc[a[0, 1], a[1, 1]] - deltaeps*nc[a[0, 1], a[1, 1]] - 
   (U*nc[a[0, 1], a[1, 1]])/2 + gammaPol*nc[a[0, 1], f[1, 0, 1]] + delta*nc[d[0, 0], d[1, 0]] + deltaeps*nc[d[0, 0], d[1, 0]] - (U*nc[d[0, 0], d[1, 0]])/2 + gammaPolCh[1]*nc[d[0, 0], f[1, 0, 0]] + delta*nc[d[0, 1], d[1, 1]] + 
   deltaeps*nc[d[0, 1], d[1, 1]] - (U*nc[d[0, 1], d[1, 1]])/2 + gammaPolCh[1]*nc[d[0, 1], f[1, 0, 1]] + gammaPol*nc[f[0, 0, 0], a[1, 0]] + gammaPolCh[1]*nc[f[0, 0, 0], d[1, 0]] + coefzeta[1, 0]*nc[f[0, 0, 0], f[1, 0, 0]] + 
   gammaPol*nc[f[0, 0, 1], a[1, 1]] + gammaPolCh[1]*nc[f[0, 0, 1], d[1, 1]] + coefzeta[1, 0]*nc[f[0, 0, 1], f[1, 0, 1]] - U*nc[a[0, 0], a[0, 1], a[1, 0], a[1, 1]] - U*nc[d[0, 0], d[0, 1], d[1, 0], d[1, 1]]
H-conj[H]=conj[deltaeps*nc[a[0, 0], a[1, 0]]] + conj[deltaeps*nc[a[0, 1], a[1, 1]]] - conj[deltaeps*nc[d[0, 0], d[1, 0]]] - conj[deltaeps*nc[d[0, 1], d[1, 1]]] - deltaeps*nc[a[0, 0], a[1, 0]] - deltaeps*nc[a[0, 1], a[1, 1]] + 
   deltaeps*nc[d[0, 0], d[1, 0]] + deltaeps*nc[d[0, 1], d[1, 1]]
Non-Hermitian Hamiltonian!
Aborting.

